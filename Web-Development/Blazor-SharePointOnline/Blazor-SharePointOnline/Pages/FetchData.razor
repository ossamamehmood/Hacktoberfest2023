@page "/fetchdata"
@using BlazorApp2.Data
@using BlazorApp2.Services;
@inject WeatherForecastService ForecastService 
@inject SharePointClientContextFactory _spClientContextFactory

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h2>@siteName</h2>
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;
    [Parameter]
    public string? siteName { get; set; }
   
    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateOnly.FromDateTime(DateTime.Now));

        using (var ctx = _spClientContextFactory.GetClientContext())
        {
            ctx.Load(ctx.Web);
            await ctx.ExecuteQueryAsync();
            siteName = ctx.Web.Title;
        }

    }



}
