*The idea is to use the helper node to reach the destination using recursion. Below is the pattern for this problem:
1. Shift ‘N-1’ disks from ‘A’ to ‘B’, using C.
2. Shift last disk from ‘A’ to ‘C’.(This is a move statement and should be printed)
3. Shift ‘N-1’ disks from ‘B’ to ‘C’, using A.
4. Total moves = 2^k - 1
Time Complexity O(2^N)
#include <iostream>
using namespace std;

void towerofhanoi(int n, char from_rod, char to_rod,char aux_rod)
{
if (n == 0) {
return;
}
towerofhanoi(n - 1, from_rod, aux_rod, to_rod);
cout << "Move disk " << n << " from rod " << from_rod<< " to rod " << to_rod << endl;
towerofhanoi(n - 1, aux_rod, to_rod, from_rod);
}
int main()
{
int n;
cout<<"Enter number of disks: ";
cin>>n;
towerofhanoi(n,'A','C','B');
}
